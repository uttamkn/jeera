import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { ProjectT, SprintT } from "@/types";
import { getProjectById} from "@/api/project";
import { addSprint } from "@/api/sprint";
import { Dialog } from "@headlessui/react";
import  DateRangePicker  from "../components/ui/DateRangePicker";
import { DateRange } from "react-day-picker";

const ProjectDetails = () => {
  const { id } = useParams();
  const [project, setProject] = useState<ProjectT | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [sprintName, setSprintName] = useState("");
  const [dateRange, setDateRange] = useState<DateRange>();
  const [creatingSprint, setCreatingSprint] = useState(false);

  // Fetch project details on mount
  useEffect(() => {
    const fetchProjectDetails = async () => {
      try {
        if (!id) throw new Error("Project ID not provided");
        const projectData = await getProjectById(id);
        setProject(projectData);
      } catch (err) {
        setError("Failed to fetch project details");
      } finally {
        setLoading(false);
      }
    };

    fetchProjectDetails();
  }, [id]);

  // Handle adding a sprint
  const handleAddSprint = async () => {
    if (!sprintName || !dateRange?.from || !dateRange?.to) {
      alert("Please provide a sprint name and select a date range.");
      return;
    }
    setCreatingSprint(true);

    try {
      const newSprint: SprintT = {
        _id: "", // This will be generated by the backend
        name: sprintName,
        projectId: id || "",
        startDate: dateRange.from,
        endDate: dateRange.to,
        status: "to-do",
        tasks: []
      };
      await addSprint(newSprint);
      setIsModalOpen(false);
      // Optionally refetch project details to update the sprint list
    } catch (err) {
      setError("Failed to add sprint");
    } finally {
      setCreatingSprint(false);
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div className="text-red-500">{error}</div>;

  return (
    <div className="max-w-4xl mx-auto mt-10">
      {project && (
        <>
          <h1 className="text-4xl font-bold">{project.name}</h1>
          <p className="text-xl mt-4">{project.topic}</p>
          <p className="text-gray-700 mt-4">{project.description}</p>

          {/* Add Sprint Button */}
          <button
            className="mt-6 px-4 py-2 bg-blue-500 text-white rounded"
            onClick={() => setIsModalOpen(true)}
          >
            Add Sprint
          </button>

          {/* Modal for adding sprint */}
          <Dialog open={isModalOpen} onClose={() => setIsModalOpen(false)} className="relative z-10">
            <div className="fixed inset-0 bg-black bg-opacity-30" />
            <div className="fixed inset-0 flex items-center justify-center p-4">
              <div className="bg-white rounded-lg p-6 max-w-md w-full">
                <Dialog.Title>Add New Sprint</Dialog.Title>

                <div className="mt-4">
                  <label className="block text-sm font-medium">Sprint Name</label>
                  <input
                    type="text"
                    value={sprintName}
                    onChange={(e) => setSprintName(e.target.value)}
                    className="border w-full mt-1 p-2 rounded"
                    placeholder="Enter sprint name"
                  />
                </div>

                <div className="mt-4">
                  <label className="block text-sm font-medium">Sprint Date Range</label>
                  <DateRangePicker
                    value={dateRange}
                    onChange={setDateRange}
                    className="w-full mt-2"
                  />
                </div>

                <div className="mt-6 flex justify-end">
                  <button
                    className="px-4 py-2 bg-gray-500 text-white rounded"
                    onClick={() => setIsModalOpen(false)}
                  >
                    Cancel
                  </button>
                  <button
                    className="ml-2 px-4 py-2 bg-blue-500 text-white rounded"
                    onClick={handleAddSprint}
                    disabled={creatingSprint}
                  >
                    {creatingSprint ? "Creating..." : "Add Sprint"}
                  </button>
                </div>
              </div>
            </div>
          </Dialog>
        </>
      )}
    </div>
  );
};

export default ProjectDetails;
