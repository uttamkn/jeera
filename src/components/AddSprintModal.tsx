import React, { useState } from "react";
import { Dialog } from "@headlessui/react";
import { DateRange } from "react-day-picker";
import DateRangePicker from "@/components/ui/DateRangePicker";
import { addSprint } from "@/api/sprint";
import { SprintT } from "@/types";

interface AddSprintModalProps {
  isOpen: boolean;
  onClose: () => void;
  projectId: string;
}

const AddSprintModal: React.FC<AddSprintModalProps> = ({ isOpen, onClose, projectId }) => {
  const [sprintName, setSprintName] = useState("");
  const [dateRange, setDateRange] = useState<DateRange>();
  const [creatingSprint, setCreatingSprint] = useState(false);
  const [error, setError] = useState("");

  // Handle adding a sprint
  const handleAddSprint = async () => {
    // Ensure both `from` and `to` dates are selected.
    if (!sprintName || !dateRange?.from || !dateRange?.to) {
      alert("Please provide a sprint name and select a complete date range.");
      return;
    }
    setCreatingSprint(true);
  
    try {
      const newSprint: SprintT = {
        _id: "", // This will be generated by the backend
        name: sprintName,
        projectId: projectId,
        startDate: dateRange.from, // Use the selected start date
        endDate: dateRange.to,     // Use the selected end date
        status: "to-do",
        tasks: []
      };
      await addSprint(newSprint);
      // Reset values after adding sprint
      setSprintName(""); // Clear the sprint name
      setDateRange(undefined); // Clear the date range
      onClose(); // Close the modal
    } catch (err) {
      setError("Failed to add sprint");
    } finally {
      setCreatingSprint(false);
    }
  };

  return (
    <Dialog open={isOpen} onClose={onClose} className="relative z-10">
      <div className="fixed inset-0 bg-black bg-opacity-30" />
      <div className="fixed inset-0 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg p-6 max-w-md w-full">
          <Dialog.Title>Add New Sprint</Dialog.Title>

          <div className="mt-4">
            <label className="block text-sm font-medium">Sprint Name</label>
            <input
              type="text"
              value={sprintName}
              onChange={(e) => setSprintName(e.target.value)}
              className="border w-full mt-1 p-2 rounded"
              placeholder="Enter sprint name"
            />
          </div>

          <div className="mt-4">
            <label className="block text-sm font-medium">Sprint Date Range</label>
            <DateRangePicker
              value={dateRange}
              onChange={setDateRange}
              className="w-full mt-2"
            />
          </div>

          {/* Show the error message if it exists */}
          {error && <p className="text-red-500 mt-2 text-sm">{error}</p>}

          <div className="mt-6 flex justify-end">
            <button
              className="px-4 py-2 bg-gray-500 text-white rounded"
              onClick={onClose}
            >
              Cancel
            </button>
            <button
              className="ml-2 px-4 py-2 bg-blue-500 text-white rounded"
              onClick={handleAddSprint}
              disabled={creatingSprint}
            >
              {creatingSprint ? "Creating..." : "Add Sprint"}
            </button>
          </div>
        </div>
      </div>
    </Dialog>
  );
};

export default AddSprintModal;
